@page "/users/list"

@attribute [Authorize]
<CascadingAuthenticationState>
    <AuthorizeView Context="UserList">
        <Authorized>
            @if (!_loader)
            {
                <PageTitle>Users</PageTitle>
                <MudContainer Class="px-0" MaxWidth="MaxWidth.False">
                    <MudStack Row="true">
                        <MudItem xs="12" sm="6" md="6">
                            <MudText Class="text-left" Color="MudBlazor.Color.Primary" Typo="Typo.h5" Style="font-weight: 400; margin-top: 20px; margin-bottom: 15px">Users</MudText>
                        </MudItem>
                    </MudStack>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField @bind-Value="searchText" DebounceInterval="500" Placeholder="Search" Style="margin-top: 5px;" Margin="Margin.Dense" OnDebounceIntervalElapsed="OnSearchInput" Variant="Variant.Outlined" Adornment="Adornment.End" IconSize="MudBlazor.Size.Medium" AdornmentIcon="@Icons.Material.Filled.Search" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTable Elevation="0" T="UserReportDto" @ref="_grid" Items="@items" Striped="false" Hover="true" Loading="@loading" ServerData="LoadData" Virtualize="true">
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Surname</MudTh>
                                    <MudTh>Email</MudTh>
                                    <MudTh>Date Created</MudTh>
                                    <MudTh Style="display: flex; justify-content: flex-end; align-items: center; padding-right: 10px;">Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.FirstName</MudTd>
                                    <MudTd Style="flex-grow: 1;">@context.LastName</MudTd>
                                    <MudTd>@context.Email</MudTd>
                                    <MudTd>@context.CreatedDate.ToString("MM/dd/yyyy")</MudTd>
                                    <MudTd Style="display: flex; justify-content: flex-end; align-items: center; padding-right: 10px;">
                                        <MudMenu Icon="@Icons.Material.Filled.Menu" ActivationEvent="@MouseEvent.MouseOver" AriaLabel="Options">
                                            <MudMenuItem Style="width: 200px" OnClick="@(() => EditUser(context.ClientId))">
                                                <MudTooltip Text="Edit this user." Placement="Placement.Right" Arrow="true">
                                                    <MudText>Edit</MudText>
                                                </MudTooltip>
                                            </MudMenuItem>

                                        </MudMenu>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            }
            else
            {
                <MudContainer Class="px-1" MaxWidth="MaxWidth.False">
                    <MudGrid>
                        <MudItem md="12" sm="12" xs="12">
                            <MudSkeleton Class="rounded-pill" SkeletonType="SkeletonType.Rectangle" Style="width: 90px; height: 40px;margin-top: 20px;" />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudPaper xs="12" sm="12" md="12" Elevation="0">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="50px" Style="margin-bottom: 10px;" />
                            </MudPaper>
                            <MudPaper xs="12" sm="12" md="12" Elevation="0">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="30px" Style="margin-bottom: 10px;" />
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="500px" />
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            }
        </Authorized>
        <NotAuthorized>
            @{
                NavigationManager.NavigateTo("/auth/logout");
            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code
{
    private MudTable<UserReportDto> _grid = new MudTable<UserReportDto>();
    private List<UserReportDto> items = new();

    private string searchText = string.Empty;
    private bool loading = false;
    private Timer? debounceTimer;
    bool _loader = true;
    private bool isInitialized = false;

    protected override void OnInitialized()
    {
        if (isInitialized) return;
        isInitialized = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _loader = true;
            InvokeAsync(LoadDataAsync);
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            debounceTimer = new Timer(800);
            debounceTimer.Elapsed += OnDebounceTimerElapsed;
            debounceTimer.AutoReset = false;

            loading = true;
            await _grid.ReloadServerData();
        }
        catch
        {
            ShowError("Uh-oh, we encountered an issue. We're working hard to fix it. Please refresh the page or try again in a moment.");
        }
        finally
        {
            loading = false;
            _loader = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchInput(string value)
    {
        searchText = value;
        await _grid.ReloadServerData();
        debounceTimer?.Stop();
        debounceTimer?.Start();
    }

    private void OnDebounceTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            debounceTimer?.Stop();
            await RefreshData();
        });
    }

    private async Task RefreshData()
    {
        await _grid.ReloadServerData();
    }

    private async Task<TableData<UserReportDto>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var result = await _userService.LoadUserData(state, searchText);
            items = result.Items;
            return new TableData<UserReportDto>
            {
                Items = result.Items,
                TotalItems = result.TotalCount
            };
        }
        catch
        {
            ShowError("Uh-oh, we encountered an issue. We're working hard to fix it. Please refresh the page or try again in a moment.");
            return new TableData<UserReportDto>
            {
                Items = new List<UserReportDto>(),
                TotalItems = 0
            };
        }
    }

    private void EditUser(int userId)
    {
        NavigationManager.NavigateTo($"/users/edit/{userId}");
    }

    void ShowError(string message)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"{message}", Severity.Error, c => c.SnackbarVariant = Variant.Filled);
    }

    public void Dispose()
    {
        debounceTimer?.Stop();
        debounceTimer?.Dispose();
    }
}