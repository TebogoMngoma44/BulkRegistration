@page "/disability/list"

@attribute [Authorize]
<CascadingAuthenticationState>
    <AuthorizeView  Context="DisabilityList">
        <Authorized>

            @if (!_loader)
            {
                <MudContainer Class="px-0" MaxWidth="MaxWidth.False">
                    <MudStack Row="true">
                        <MudItem xs="12" sm="6" md="6">
                            <MudText Class="text-left" Color="MudBlazor.Color.Primary" Typo="Typo.h5" Style="font-weight: 400; margin-top: 20px; margin-bottom: 15px">Disability </MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6">
                            <MudGrid Justify="Justify.FlexEnd" Class="text-end" Style="color: #fff; padding-right: 10px; margin-top: 7px; margin-bottom: 15px">
                                <MudTooltip Text="Create a new type." Style="background-color: #2E3168; color: #fff" Placement="Placement.Bottom" Arrow="true">
                                    <MudButton Class="mt-5 rounded-pill" Variant="Variant.Outlined" Color="MudBlazor.Color.Info" Style="height: 45px; padding-left: 40px; padding-right: 40px; font-weight: bold; color: #2E3168; border-color: #2E3168; border: solid 2px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);" @onclick="() => ToAdd()">Create</MudButton>
                                </MudTooltip>
                            </MudGrid>
                        </MudItem>
                    </MudStack>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField @bind-Value="searchText" DebounceInterval="500"
                                          Placeholder="Search"
                                          Style="margin-top: 5px;"
                                          Margin="Margin.Dense"
                                          OnDebounceIntervalElapsed="OnSearchInput"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.End"
                                          IconSize="MudBlazor.Size.Medium"
                                          AdornmentIcon="@Icons.Material.Filled.Search" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTable Elevation="0" T="DisabilityDto" @ref="_grid"
                                      Items="@items"
                                      Striped="false"
                                      Hover="true"
                                      Loading="@loading"
                                      ServerData="LoadData"
                                      Virtualize="true">

                                <HeaderContent>
                                  
                                    <MudTh>Disability Description</MudTh>
                                    <MudTh>Created Date</MudTh>
                                    <MudTh Style="display: flex; 
                                                   justify-content: flex-end; 
                                                   align-items: center; 
                                                   padding-right: 10px;"
                                                   >Actions</MudTh>
                                </HeaderContent>

                                <RowTemplate>                                    
                                    <MudTd Style="flex-grow: 1;">@context.DisabilityDescription</MudTd>
                                    <MudTd>@context.CreatedDate.ToString("MM/dd/yyyy")</MudTd>
                                   
                                @{
                                var DisabilityKey = context.DisabilityKey;
                                }
                                <MudTd Style="display: flex; justify-content: flex-end; align-items: center; padding-right: 10px;">
                                           <MudMenu Icon="@Icons.Material.Filled.Menu"
                                                     ActivationEvent="@MouseEvent.MouseOver"
                                                     AriaLabel="Options">
                                             <MudMenuItem OnClick="() => ToEdit(DisabilityKey)"
                                                          Style="width: 200px">
                                                          <MudTooltip Text="Edit this Disability."
                                                                      Placement="Placement.Right"
                                                                      Arrow="true">
                                                                      <MudText>Edit</MudText>
                                                          </MudTooltip>
                                             </MudMenuItem>
                                             <MudMenuItem OnClick="() => ToDisable(DisabilityKey)">
                                                          <MudTooltip Text="Delete this Disability."
                                                                       Placement="Placement.Right"
                                                                       Arrow="true">
                                                                       <MudText>Delete</MudText>
                                                          </MudTooltip>
                                             </MudMenuItem>
                                           </MudMenu>
                                </MudTd>
                                    

                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>

                            </MudTable>
                        </MudItem>
                    </MudGrid>

                </MudContainer>
            }
            else
            {
                <MudContainer Class="px-1" MaxWidth="MaxWidth.False">
                    <MudGrid>
                        <MudItem md="12" sm="12" xs="12">
                            <MudSkeleton Class="rounded-pill" SkeletonType="SkeletonType.Rectangle" Style="width: 90px; height: 40px;margin-top: 20px;" />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudPaper xs="12" sm="12" md="12" Elevation="0">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="50px" Style="margin-bottom: 10px;" />
                            </MudPaper>
                            <MudPaper xs="12" sm="12" md="12" Elevation="0">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="30px" Style="margin-bottom: 10px;" />
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="500px" />
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            }
        </Authorized>
        <NotAuthorized>
            @{
                NavigationManager.NavigateTo("/auth/logout");
            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


@code
{
    private MudTable<DisabilityDto> _grid = new MudTable<DisabilityDto>();
    private List<DisabilityDto> items = new();

    public DisabilityDto Disability = new DisabilityDto();
    private bool isInitialized = false;
    private string searchText = string.Empty;
    private Timer? debounceTimer;
    private readonly bool loading = true;
    bool _loader = true;

    protected override void OnInitialized()
    {
        if (isInitialized) return;
        isInitialized = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _loader = true;
            _drawerService.IsDrawerOpen = true;
            InvokeAsync(LoadDataAsync);
        }
    }

    private async Task OnSearchInput(string value)
    {
        searchText = value;
        await _grid.ReloadServerData();
        debounceTimer?.Stop();
        debounceTimer?.Start();
    }

    private async Task<TableData<DisabilityDto>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var result = await _disabilityService.LoadDisabilityData(state, searchText);
            items = result.Items;
            return new TableData<DisabilityDto>
                {
                    Items = result.Items,
                    TotalItems = result.TotalCount
                };
        }
        catch
        {
            ShowError("Uh-oh, we encountered an issue. We're working hard to fix it. Please refresh the page or try again in a moment.");
            return new TableData<DisabilityDto>
                {
                    Items = new List<DisabilityDto>(),
                    TotalItems = 0
                };
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            debounceTimer = new Timer(800);
            debounceTimer.Elapsed += OnDebounceTimerElapsed;
            debounceTimer.AutoReset = false;
            await Task.Delay(10);
        }
        catch
        {
            ShowError("Uh-oh, we encountered an issue. We're working hard to fix it. Please refresh the page or try again in a moment.");
        }
        finally
        {
            _loader = false;
            StateHasChanged();
        }
    }

    private void OnDebounceTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            debounceTimer?.Stop();
            await RefreshData();
        });
    }

    private async Task RefreshData()
    {
        await _grid.ReloadServerData();
    }

    void ShowError(string message)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"{message}", Severity.Error, c => c.SnackbarVariant = Variant.Filled);
    }

    async Task ToAdd()
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = true,

                    MaxWidth = MaxWidth.Medium,
                    FullWidth = true,
                    CloseButton = true,
                };
            await DialogService.ShowAsync<DisabilityCreate>("Create Disability", options);
        }
        catch (Exception ex)
        {
            ShowError("Uh-oh, we encountered an issue. We're working hard to fix it. Please refresh the page or try again in a moment.");
        }
    }

    async Task ToEdit(Guid key)
    {
        try
        {
            var encryptedParam = await EncryptionHelper.Encode(key.ToString());
            var parameters = new DialogParameters();
            parameters.Add("key", encryptedParam);

           
            var options = new DialogOptions
            {
                    CloseOnEscapeKey = true,
                    MaxWidth = MaxWidth.Medium,
                    FullWidth = true,
                    CloseButton = true,
            };
            await DialogService.ShowAsync<DisabilityUpdate>("Update Disability", parameters, options);
        }
        catch (Exception ex)
        {
            ShowError("Uh-oh, we encountered an issue. We're working hard to fix it. Please refresh the page or try again in a moment.");
        }
    }

    async Task ToDisable(Guid key)
    {

        try
        {
            DisabilityUpdateDto DisabilityUpdateDto = new DisabilityUpdateDto { DisabilityKey = key };

            var curDisability = await _disabilityService.GetDisability(key);//disabilityUpdateDto); // Get the disability using the disabilityKey
            Disability = new DisabilityDto
                {
                    DisabilityId = curDisability.DisabilityId,
                    DisabilityKey = curDisability.DisabilityKey,
                    DisabilityDescription = curDisability.DisabilityDescription.Trim(),
                   
                    
                };

            if (Disability != null)
            {
                DisabilityDeleteDto DisabilityDeleteDto = new DisabilityDeleteDto { DisabilityKey = Disability.DisabilityKey };

                var deleteDisability = await _disabilityService.DeleteDisability(DisabilityDeleteDto);
                await _grid.ReloadServerData();
            }
        }
        catch (Exception ex)
        {
            ShowError("Uh-oh, we encountered an issue. We're working hard to fix it. Please refresh the page or try again in a moment.");
        }

    }

}

